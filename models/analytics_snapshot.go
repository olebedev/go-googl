package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// AnalyticsSnapshot analytics snapshot
// swagger:model AnalyticsSnapshot
type AnalyticsSnapshot struct {

	// Top browsers, e.g. "Chrome"; sorted by (descending) click counts. Only present if this data is available.
	Browsers []*StringCount `json:"browsers"`

	// Top countries (expressed as country codes), e.g. "US" or "DE"; sorted by (descending) click counts. Only present if this data is available.
	Countries []*StringCount `json:"countries"`

	// Number of clicks on all goo.gl short URLs pointing to this long URL.
	LongURLClicks int64 `json:"longUrlClicks,omitempty"`

	// Top platforms or OSes, e.g. "Windows"; sorted by (descending) click counts. Only present if this data is available.
	Platforms []*StringCount `json:"platforms"`

	// Top referring hosts, e.g. "www.google.com"; sorted by (descending) click counts. Only present if this data is available.
	Referrers []*StringCount `json:"referrers"`

	// Number of clicks on this short URL.
	ShortURLClicks int64 `json:"shortUrlClicks,omitempty"`
}

// Validate validates this analytics snapshot
func (m *AnalyticsSnapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBrowsers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCountries(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlatforms(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReferrers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyticsSnapshot) validateBrowsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Browsers) { // not required
		return nil
	}

	for i := 0; i < len(m.Browsers); i++ {

		if swag.IsZero(m.Browsers[i]) { // not required
			continue
		}

		if m.Browsers[i] != nil {

			if err := m.Browsers[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *AnalyticsSnapshot) validateCountries(formats strfmt.Registry) error {

	if swag.IsZero(m.Countries) { // not required
		return nil
	}

	for i := 0; i < len(m.Countries); i++ {

		if swag.IsZero(m.Countries[i]) { // not required
			continue
		}

		if m.Countries[i] != nil {

			if err := m.Countries[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *AnalyticsSnapshot) validatePlatforms(formats strfmt.Registry) error {

	if swag.IsZero(m.Platforms) { // not required
		return nil
	}

	for i := 0; i < len(m.Platforms); i++ {

		if swag.IsZero(m.Platforms[i]) { // not required
			continue
		}

		if m.Platforms[i] != nil {

			if err := m.Platforms[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *AnalyticsSnapshot) validateReferrers(formats strfmt.Registry) error {

	if swag.IsZero(m.Referrers) { // not required
		return nil
	}

	for i := 0; i < len(m.Referrers); i++ {

		if swag.IsZero(m.Referrers[i]) { // not required
			continue
		}

		if m.Referrers[i] != nil {

			if err := m.Referrers[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
