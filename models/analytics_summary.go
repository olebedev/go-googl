package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// AnalyticsSummary analytics summary
// swagger:model AnalyticsSummary
type AnalyticsSummary struct {

	// Click analytics over all time.
	AllTime *AnalyticsSnapshot `json:"allTime,omitempty"`

	// Click analytics over the last day.
	Day *AnalyticsSnapshot `json:"day,omitempty"`

	// Click analytics over the last month.
	Month *AnalyticsSnapshot `json:"month,omitempty"`

	// Click analytics over the last two hours.
	TwoHours *AnalyticsSnapshot `json:"twoHours,omitempty"`

	// Click analytics over the last week.
	Week *AnalyticsSnapshot `json:"week,omitempty"`
}

// Validate validates this analytics summary
func (m *AnalyticsSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDay(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMonth(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTwoHours(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWeek(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyticsSummary) validateAllTime(formats strfmt.Registry) error {

	if swag.IsZero(m.AllTime) { // not required
		return nil
	}

	if m.AllTime != nil {

		if err := m.AllTime.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *AnalyticsSummary) validateDay(formats strfmt.Registry) error {

	if swag.IsZero(m.Day) { // not required
		return nil
	}

	if m.Day != nil {

		if err := m.Day.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *AnalyticsSummary) validateMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.Month) { // not required
		return nil
	}

	if m.Month != nil {

		if err := m.Month.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *AnalyticsSummary) validateTwoHours(formats strfmt.Registry) error {

	if swag.IsZero(m.TwoHours) { // not required
		return nil
	}

	if m.TwoHours != nil {

		if err := m.TwoHours.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *AnalyticsSummary) validateWeek(formats strfmt.Registry) error {

	if swag.IsZero(m.Week) { // not required
		return nil
	}

	if m.Week != nil {

		if err := m.Week.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
