package url

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUrlshortenerURLListParams creates a new UrlshortenerURLListParams object
// with the default values initialized.
func NewUrlshortenerURLListParams() *UrlshortenerURLListParams {
	var (
		altDefault         = string("json")
		prettyPrintDefault = bool(true)
	)
	return &UrlshortenerURLListParams{
		Alt:         &altDefault,
		PrettyPrint: &prettyPrintDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewUrlshortenerURLListParamsWithTimeout creates a new UrlshortenerURLListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUrlshortenerURLListParamsWithTimeout(timeout time.Duration) *UrlshortenerURLListParams {
	var (
		altDefault         = string("json")
		prettyPrintDefault = bool(true)
	)
	return &UrlshortenerURLListParams{
		Alt:         &altDefault,
		PrettyPrint: &prettyPrintDefault,

		timeout: timeout,
	}
}

// NewUrlshortenerURLListParamsWithContext creates a new UrlshortenerURLListParams object
// with the default values initialized, and the ability to set a context for a request
func NewUrlshortenerURLListParamsWithContext(ctx context.Context) *UrlshortenerURLListParams {
	var (
		altDefault         = string("json")
		prettyPrintDefault = bool(true)
	)
	return &UrlshortenerURLListParams{
		Alt:         &altDefault,
		PrettyPrint: &prettyPrintDefault,

		Context: ctx,
	}
}

/*UrlshortenerURLListParams contains all the parameters to send to the API endpoint
for the urlshortener url list operation typically these are written to a http.Request
*/
type UrlshortenerURLListParams struct {

	/*Alt
	  Data format for the response.

	*/
	Alt *string
	/*Fields
	  Selector specifying which fields to include in a partial response.

	*/
	Fields *string
	/*Key
	  API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.

	*/
	Key *string
	/*OauthToken
	  OAuth 2.0 token for the current user.

	*/
	OauthToken *string
	/*PrettyPrint
	  Returns response with indentations and line breaks.

	*/
	PrettyPrint *bool
	/*Projection
	  Additional information to return.

	*/
	Projection *string
	/*QuotaUser
	  Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.

	*/
	QuotaUser *string
	/*StartToken
	  Token for requesting successive pages of results.

	*/
	StartToken *string
	/*UserIP
	  IP address of the site where the request originates. Use this if you want to enforce per-user limits.

	*/
	UserIP *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the urlshortener url list params
func (o *UrlshortenerURLListParams) WithTimeout(timeout time.Duration) *UrlshortenerURLListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the urlshortener url list params
func (o *UrlshortenerURLListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the urlshortener url list params
func (o *UrlshortenerURLListParams) WithContext(ctx context.Context) *UrlshortenerURLListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the urlshortener url list params
func (o *UrlshortenerURLListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithAlt adds the alt to the urlshortener url list params
func (o *UrlshortenerURLListParams) WithAlt(alt *string) *UrlshortenerURLListParams {
	o.SetAlt(alt)
	return o
}

// SetAlt adds the alt to the urlshortener url list params
func (o *UrlshortenerURLListParams) SetAlt(alt *string) {
	o.Alt = alt
}

// WithFields adds the fields to the urlshortener url list params
func (o *UrlshortenerURLListParams) WithFields(fields *string) *UrlshortenerURLListParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the urlshortener url list params
func (o *UrlshortenerURLListParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithKey adds the key to the urlshortener url list params
func (o *UrlshortenerURLListParams) WithKey(key *string) *UrlshortenerURLListParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the urlshortener url list params
func (o *UrlshortenerURLListParams) SetKey(key *string) {
	o.Key = key
}

// WithOauthToken adds the oauthToken to the urlshortener url list params
func (o *UrlshortenerURLListParams) WithOauthToken(oauthToken *string) *UrlshortenerURLListParams {
	o.SetOauthToken(oauthToken)
	return o
}

// SetOauthToken adds the oauthToken to the urlshortener url list params
func (o *UrlshortenerURLListParams) SetOauthToken(oauthToken *string) {
	o.OauthToken = oauthToken
}

// WithPrettyPrint adds the prettyPrint to the urlshortener url list params
func (o *UrlshortenerURLListParams) WithPrettyPrint(prettyPrint *bool) *UrlshortenerURLListParams {
	o.SetPrettyPrint(prettyPrint)
	return o
}

// SetPrettyPrint adds the prettyPrint to the urlshortener url list params
func (o *UrlshortenerURLListParams) SetPrettyPrint(prettyPrint *bool) {
	o.PrettyPrint = prettyPrint
}

// WithProjection adds the projection to the urlshortener url list params
func (o *UrlshortenerURLListParams) WithProjection(projection *string) *UrlshortenerURLListParams {
	o.SetProjection(projection)
	return o
}

// SetProjection adds the projection to the urlshortener url list params
func (o *UrlshortenerURLListParams) SetProjection(projection *string) {
	o.Projection = projection
}

// WithQuotaUser adds the quotaUser to the urlshortener url list params
func (o *UrlshortenerURLListParams) WithQuotaUser(quotaUser *string) *UrlshortenerURLListParams {
	o.SetQuotaUser(quotaUser)
	return o
}

// SetQuotaUser adds the quotaUser to the urlshortener url list params
func (o *UrlshortenerURLListParams) SetQuotaUser(quotaUser *string) {
	o.QuotaUser = quotaUser
}

// WithStartToken adds the startToken to the urlshortener url list params
func (o *UrlshortenerURLListParams) WithStartToken(startToken *string) *UrlshortenerURLListParams {
	o.SetStartToken(startToken)
	return o
}

// SetStartToken adds the startToken to the urlshortener url list params
func (o *UrlshortenerURLListParams) SetStartToken(startToken *string) {
	o.StartToken = startToken
}

// WithUserIP adds the userIP to the urlshortener url list params
func (o *UrlshortenerURLListParams) WithUserIP(userIP *string) *UrlshortenerURLListParams {
	o.SetUserIP(userIP)
	return o
}

// SetUserIP adds the userIp to the urlshortener url list params
func (o *UrlshortenerURLListParams) SetUserIP(userIP *string) {
	o.UserIP = userIP
}

// WriteToRequest writes these params to a swagger request
func (o *UrlshortenerURLListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Alt != nil {

		// query param alt
		var qrAlt string
		if o.Alt != nil {
			qrAlt = *o.Alt
		}
		qAlt := qrAlt
		if qAlt != "" {
			if err := r.SetQueryParam("alt", qAlt); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.Key != nil {

		// query param key
		var qrKey string
		if o.Key != nil {
			qrKey = *o.Key
		}
		qKey := qrKey
		if qKey != "" {
			if err := r.SetQueryParam("key", qKey); err != nil {
				return err
			}
		}

	}

	if o.OauthToken != nil {

		// query param oauth_token
		var qrOauthToken string
		if o.OauthToken != nil {
			qrOauthToken = *o.OauthToken
		}
		qOauthToken := qrOauthToken
		if qOauthToken != "" {
			if err := r.SetQueryParam("oauth_token", qOauthToken); err != nil {
				return err
			}
		}

	}

	if o.PrettyPrint != nil {

		// query param prettyPrint
		var qrPrettyPrint bool
		if o.PrettyPrint != nil {
			qrPrettyPrint = *o.PrettyPrint
		}
		qPrettyPrint := swag.FormatBool(qrPrettyPrint)
		if qPrettyPrint != "" {
			if err := r.SetQueryParam("prettyPrint", qPrettyPrint); err != nil {
				return err
			}
		}

	}

	if o.Projection != nil {

		// query param projection
		var qrProjection string
		if o.Projection != nil {
			qrProjection = *o.Projection
		}
		qProjection := qrProjection
		if qProjection != "" {
			if err := r.SetQueryParam("projection", qProjection); err != nil {
				return err
			}
		}

	}

	if o.QuotaUser != nil {

		// query param quotaUser
		var qrQuotaUser string
		if o.QuotaUser != nil {
			qrQuotaUser = *o.QuotaUser
		}
		qQuotaUser := qrQuotaUser
		if qQuotaUser != "" {
			if err := r.SetQueryParam("quotaUser", qQuotaUser); err != nil {
				return err
			}
		}

	}

	if o.StartToken != nil {

		// query param start-token
		var qrStartToken string
		if o.StartToken != nil {
			qrStartToken = *o.StartToken
		}
		qStartToken := qrStartToken
		if qStartToken != "" {
			if err := r.SetQueryParam("start-token", qStartToken); err != nil {
				return err
			}
		}

	}

	if o.UserIP != nil {

		// query param userIp
		var qrUserIP string
		if o.UserIP != nil {
			qrUserIP = *o.UserIP
		}
		qUserIP := qrUserIP
		if qUserIP != "" {
			if err := r.SetQueryParam("userIp", qUserIP); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
